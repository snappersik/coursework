import axios from 'axios';

export const API_URL = 'http://localhost:8080/api/rest';

const apiClient = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true,
});

apiClient.interceptors.request.use(
    (config) => {
      console.log('üîÑ –ò—Å—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:', {
        url: config.url,
        method: config.method,
        headers: config.headers,
        withCredentials: config.withCredentials,
        cookies: document.cookie,
      });
      return config;
    },
    (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return Promise.reject(error);
    }
);

apiClient.interceptors.response.use(
    (response) => {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', {
        url: response.config.url,
        status: response.status,
      });
      return response;
    },
    (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', {
        url: error.config?.url,
        status: error.response?.status,
        data: error.response?.data,
        message: error.message,
      });
      if (error.response?.status === 401) {
        console.error('üîí –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
      } else if (error.response?.status === 403) {
        console.error('üö´ –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
      }
      return Promise.reject(error);
    }
);

export const login = async (email, password) => {
  try {
    const response = await apiClient.post('/auth/login', { email, password });
    if (response.status === 200) {
      const userInfo = await getUserInfo();
      return { success: true, userInfo };
    }
    return { success: false, error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' };
  } catch (error) {
    console.error('Login error:', error);
    throw error;
  }
};

export const logout = async () => {
  try {
    const response = await apiClient.post('/auth/logout');
    return {
      success: response.status === 200,
    };
  } catch (error) {
    console.error('Logout error:', error);
    return {
      success: false,
      error: error.response?.data || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ',
    };
  }
};

export const checkAuth = async () => {
  try {
    const response = await apiClient.get('/users/profile');
    if (response.status === 200) {
      return {
        success: true,
        userInfo: response.data,
      };
    }
    return {
      success: false,
    };
  } catch (error) {
    console.error('Auth check error:', error);
    return {
      success: false,
      error: error.response?.data || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
    };
  }
};

export const getUserInfo = async () => {
  try {
    const response = await apiClient.get('/users/profile');
    if (response.status === 200) {
      return response.data;
    }
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
  } catch (error) {
    console.error('Get user info error:', error);
    throw error;
  }
};

export const updateUserProfile = async (userData) => {
  try {
    const response = await apiClient.put('/users/profile', userData);
    if (response.status === 200) {
      return response.data;
    }
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
  } catch (error) {
    console.error('Update profile error:', error);
    throw error;
  }
};

export const registerUser = async (registerData) => {
  try {
    const response = await apiClient.post('/auth/register', registerData);
    if (response.status === 200) {
      return { success: true };
    }
    return { success: false, error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' };
  } catch (error) {
    console.error('Register error:', error);
    return {
      success: false,
      error: error.response?.data || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
    };
  }
};

export const testAuthentication = async () => {
  console.group('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  try {
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç —Å withCredentials');
    try {
      const cookieResponse = await axios.get(`${API_URL}/users/profile`, {
        withCredentials: true,
      });
      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies —Ä–∞–±–æ—Ç–∞–µ—Ç:', cookieResponse.data);
    } catch (error) {
      console.error('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response?.status);
    }

    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º apiClient');
    try {
      const clientResponse = await apiClient.get('/users/profile');
      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ apiClient —Ä–∞–±–æ—Ç–∞–µ—Ç:', clientResponse.data);
    } catch (error) {
      console.error('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ apiClient –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response?.status);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
  }
  console.groupEnd();
};

export const addToCart = async (userId, productId) => {
  try {
    const response = await apiClient.post(`/carts/${userId}/products/${productId}`);
    return response.data;
  } catch (error) {
    console.error('Add to cart error:', error);
    throw new Error(error.response?.data || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É');
  }
};

export const removeFromCart = async (userId, productId) => {
  try {
    const response = await apiClient.delete(`/carts/${userId}/products/${productId}`);
    return response.data;
  } catch (error) {
    console.error('Remove from cart error:', error);
    throw new Error(error.response?.data || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
  }
};

export const createOrder = async () => {
  try {
    const response = await apiClient.post('/orders/create');
    return response.data;
  } catch (error) {
    console.error('Create order error:', error);
    throw new Error(error.response?.data || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑');
  }
};

export const getUserOrders = async () => {
  try {
    const response = await apiClient.get('/orders/my');
    return response.data;
  } catch (error) {
    console.error('Get user orders error:', error);
    throw new Error(error.response?.data || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã');
  }
};

export const getUserEventApplications = async () => {
  try {
    const response = await apiClient.get('/event-applications/my');
    return response.data;
  } catch (error) {
    console.error('Get user event applications error:', error);
    throw new Error(error.response?.data || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
  }
};

export const cancelEventApplication = async (applicationId) => {
  try {
    const response = await apiClient.put(`/event-applications/${applicationId}/cancel`);
    return response.data;
  } catch (error) {
    console.error('Cancel event application error:', error);
    throw new Error(error.response?.data || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É');
  }
};

export const restoreEventApplication = async (applicationId) => {
  try {
    const response = await apiClient.put(`/event-applications/${applicationId}/restore`);
    return response.data;
  } catch (error) {
    console.error('Restore event application error:', error);
    throw new Error(error.response?.data || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É');
  }
};

export const getEventById = async (eventId) => {
  try {
    const response = await apiClient.get(`/events/${eventId}`);
    return response.data;
  } catch (error) {
    console.error('Get event details error:', error);
    throw new Error(error.response?.data || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏');
  }
};

export const getAuditEntries = async () => {
  try {
    const response = await apiClient.get('/audit'); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å '/rest/audit' –Ω–∞ '/audit'
    return response.data;
  } catch (error) {
    console.error('Get audit entries error:', error);
    throw new Error(error.response?.data || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–∞');
  }
};

export default apiClient;