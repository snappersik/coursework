import React, { useState } from 'react';
import { observer } from 'mobx-react-lite';
import EventDetailsModal from '../modals/EventDetailsModal';
import ConfirmationModal from '../modals/ConfirmationModal';
import { toast } from 'react-toastify';

const EventsTab = observer(({ applications, onCancelApplication, onRestoreApplication }) => {
  const [selectedApplication, setSelectedApplication] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [confirmAction, setConfirmAction] = useState(null);
  const [actionText, setActionText] = useState('');

  const handleViewDetails = (application) => {
    setSelectedApplication(application);
    setShowDetailsModal(true);
  };

  const handleCancelClick = (application) => {
    setSelectedApplication(application);
    setConfirmAction('cancel');
    setActionText('–æ—Ç–º–µ–Ω–∏—Ç—å');
    setShowConfirmModal(true);
  };

  const handleRestoreClick = (application) => {
    setSelectedApplication(application);
    setConfirmAction('restore');
    setActionText('–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å');
    setShowConfirmModal(true);
  };

  const handleConfirmAction = async () => {
    setShowConfirmModal(false);
    
    if (confirmAction === 'cancel') {
      const success = await onCancelApplication(selectedApplication.id);
      if (success) {
        toast.success('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      } else {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É');
      }
    } else if (confirmAction === 'restore') {
      const success = await onRestoreApplication(selectedApplication.id);
      if (success) {
        toast.success('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É');
      }
    }
  };

  // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
  const activeApplications = applications.filter(app => !app.isDeleted);
  const deletedApplications = applications.filter(app => app.isDeleted);

  if (applications.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center p-12 bg-gray-700 rounded-lg">
        <div className="text-5xl mb-5">üìÖ</div>
        <h3 className="text-xl font-semibold text-yellow-500 mb-2">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h3>
        <p className="text-gray-400">–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</p>
      </div>
    );
  }

  return (
    <div className="text-white">
      <h2 className="text-2xl font-bold text-yellow-500 mb-5">–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h2>
      
      {activeApplications.length > 0 && (
        <div className="mb-8">
          <h3 className="text-xl text-gray-300 mb-4">–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
            {activeApplications.map(application => (
              <div key={application.id} className="bg-gray-700 rounded-lg overflow-hidden shadow-md">
                <div className="bg-gray-800 p-4 flex justify-between items-center">
                  <div className="flex flex-col">
                    <span className="font-bold">–ó–∞—è–≤–∫–∞ #{application.id}</span>
                    <span className="text-sm text-gray-400">{application.createdWhen}</span>
                  </div>
                  <div className={`px-3 py-1 rounded-full text-sm font-semibold
                    ${application.applicationStatus === 'APPROVED' ? 'bg-green-500 text-white' : 
                      application.applicationStatus === 'REJECTED' ? 'bg-red-500 text-white' : 
                      'bg-yellow-500 text-gray-900'}`}>
                    {application.applicationStatus === 'APPROVED' ? '–û–¥–æ–±—Ä–µ–Ω–∞' : 
                      application.applicationStatus === 'REJECTED' ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' : 
                      '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'}
                  </div>
                </div>
                
                <div className="p-4 flex justify-between">
                  <button 
                    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                    onClick={() => handleViewDetails(application)}
                  >
                    –ü—Ä–æ—Å–º–æ—Ç—Ä
                  </button>
                  <button 
                    className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
                    onClick={() => handleCancelClick(application)}
                  >
                    –û—Ç–º–µ–Ω–∏—Ç—å
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {deletedApplications.length > 0 && (
        <div>
          <h3 className="text-xl text-gray-300 mb-4">–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
            {deletedApplications.map(application => (
              <div key={application.id} className="bg-gray-700 rounded-lg overflow-hidden shadow-md opacity-70">
                <div className="bg-gray-800 p-4 flex justify-between items-center">
                  <div className="flex flex-col">
                    <span className="font-bold">–ó–∞—è–≤–∫–∞ #{application.id}</span>
                    <span className="text-sm text-gray-400">{application.createdWhen}</span>
                  </div>
                  <div className="bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
                    –û—Ç–º–µ–Ω–µ–Ω–∞
                  </div>
                </div>
                
                <div className="p-4 flex justify-between">
                  <button 
                    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                    onClick={() => handleViewDetails(application)}
                  >
                    –ü—Ä–æ—Å–º–æ—Ç—Ä
                  </button>
                  <button 
                    className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
                    onClick={() => handleRestoreClick(application)}
                  >
                    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      <EventDetailsModal 
        isOpen={showDetailsModal} 
        onClose={() => setShowDetailsModal(false)} 
        application={selectedApplication} 
      />
      
      <ConfirmationModal 
        isOpen={showConfirmModal} 
        onClose={() => setShowConfirmModal(false)} 
        onConfirm={handleConfirmAction}
        title={`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è`}
        message={`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${actionText} –∑–∞—è–≤–∫—É #${selectedApplication?.id}?`}
      />
    </div>
  );
});

export default EventsTab;
