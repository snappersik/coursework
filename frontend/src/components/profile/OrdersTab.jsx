import React, { useState } from 'react';
import { observer } from 'mobx-react-lite';
import OrderDetailsModal from '../modals/OrderDetailsModal';
import { format, parseISO, isValid } from 'date-fns'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ isValid –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
import { ru } from 'date-fns/locale';

const OrdersTab = observer(({ orders }) => {
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);

  const handleViewDetails = (order) => {
    setSelectedOrder(order);
    setShowDetailsModal(true);
  };

  const getStatusClass = (status) => {
    switch (status) {
      case 'PENDING': return 'bg-yellow-500 text-yellow-900';
      case 'COMPLETED': return 'bg-green-500 text-green-900';
      case 'CANCELLED': return 'bg-red-500 text-red-900';
      default: return 'bg-gray-500 text-gray-900';
    }
  };

  const translateStatus = (status) => {
    const statuses = {
      PENDING: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
      COMPLETED: "–ó–∞–≤–µ—Ä—à–µ–Ω",
      CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω"
    };
    return statuses[status] || status;
  };

  const formatDateForOrdersTab = (dateString) => {
    if (!dateString) {
      return 'N/A';
    }
    try {
      let parsableDateString = String(dateString);
      // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å "YYYY-MM-DD HH:mm:ss.SSS" –≤ "YYYY-MM-DDTHH:mm:ss.SSS"
      if (/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(\.\d+)?$/.test(parsableDateString)) {
        parsableDateString = parsableDateString.replace(' ', 'T');
      }
      // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–º–º" –≤ "YYYY-MM-DDTHH:mm"
      else if (/^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}(:\d{2})?(\.\d+)?$/.test(parsableDateString)) {
        const parts = parsableDateString.split(' ');
        const dateParts = parts[0].split('.');
        // –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å HH:mm –∏–ª–∏ HH:mm:ss
        const timePart = parts.length > 1 ? parts[1] : "00:00";
        parsableDateString = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}T${timePart}`;
      }

      const date = parseISO(parsableDateString);
      if (isValid(date)) {
        return format(date, 'dd MMMM yyyy, HH:mm', { locale: ru });
      }
      console.warn("Could not parse date for OrdersTab with parseISO after transformations:", dateString, "->", parsableDateString);
      return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
    } catch (error) {
      console.error("Error formatting date in OrdersTab:", dateString, error);
      return '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
    }
  };


  if (!orders || orders.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center p-12 bg-gray-700 rounded-lg text-white">
        <div className="text-5xl mb-5">üì¶</div>
        <h3 className="text-xl font-semibold text-yellow-400 mb-2">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</h3>
        <p className="text-gray-300">–°–∞–º–æ–µ –≤—Ä–µ–º—è —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–∫–∞–∑–∞—Ç—å!</p>
      </div>
    );
  }

  return (
    <div className="space-y-6 text-white">
      <h2 className="text-2xl font-semibold text-yellow-400 mb-6">–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h2>
      {orders.map((order) => (
        <div key={order.id} className="bg-gray-700 shadow-lg rounded-lg p-6">
          <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
            <div>
              <h3 className="text-xl font-semibold text-gray-100">–ó–∞–∫–∞–∑ #{order.id}</h3>
              <p className="text-sm text-gray-400">
                –î–∞—Ç–∞: {formatDateForOrdersTab(order.createdWhen)} {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é */}
              </p>
            </div>
            <div className={`mt-2 sm:mt-0 px-3 py-1 text-sm font-medium rounded-full ${getStatusClass(order.orderStatus)}`}>
              {translateStatus(order.orderStatus)}
            </div>
          </div>

          <div className="mb-4">
            <p className="text-lg font-semibold text-gray-200">–°—É–º–º–∞: {order.total?.toFixed(2) || '0.00'} ‚ÇΩ</p>
          </div>

          {order.products && order.products.length > 0 && (
            <div className="mb-4">
              <h4 className="text-md font-semibold text-gray-300 mb-2">–¢–æ–≤–∞—Ä—ã:</h4>
              <ul className="space-y-1 list-disc list-inside text-gray-400">
                {order.products.map(product => (
                  <li key={product.id}>{product.name} - {product.price?.toFixed(2)} ‚ÇΩ</li>
                ))}
              </ul>
            </div>
          )}

          <button
            onClick={() => handleViewDetails(order)}
            className="w-full sm:w-auto bg-yellow-500 hover:bg-yellow-600 text-black font-medium py-2 px-4 rounded-md transition duration-150 ease-in-out"
          >
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
          </button>
        </div>
      ))}

      {showDetailsModal && selectedOrder && (
        <OrderDetailsModal
          order={selectedOrder}
          isOpen={showDetailsModal}
          onClose={() => setShowDetailsModal(false)}
        />
      )}
    </div>
  );
});

export default OrdersTab;
